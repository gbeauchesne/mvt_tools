#!/bin/bash
#
# Copyright (C) 2014 Intel Corporation
#   Author: Gwenole Beauchesne <gwenole.beauchesne@intel.com>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation; either version 2.1
# of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free
# Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301 

shopt -s extglob
prog="$0"
progname="${prog##*/}"
prefix="@prefix@"
exec_prefix="@exec_prefix@"

PCI_DEVICES_ROOT="/sys/bus/pci/devices"

DEFAULT_PLUGINS_ROOT="@libexecdir@/mvt"
DEFAULT_TESTS_ROOT="@datarootdir@/mvt"

# Default decoder command. Override with --decoder=* argument
DEFAULT_DECODER="dec_gstreamer"

# Default hardware acceleration mode. Override with --hwaccel=* argument
DEFAULT_HWACCEL="none"

# Message logging utilities
function log_message() {
    local out="$1" category="$2"
    shift 2
    echo $category: ${1+"$@"} >>$out
}

function warning()      { log_message /dev/stdout warning ${1+"$@"}; }
function error()        { log_message /dev/stderr error ${1+"$@"}; }
function fatal_error()  { error ${1+"$@"}; exit 1; }

# Array utilities
function array_decl()   { eval "${1}=() ${1}_size=0"; }
function array_append() { eval "${1}[\$((${1}_size++))]"="$2"; }

# Process command line arguments
function illegal_option() {
    fatal_error "illegal option $1"
}

function print_help() {
    cat << EOF
Usage: $prog [<options>]* [<testdir>]*

Options:
  -h, --help                  display this help and exit
      --decoder=DECODER       define the decoder to run [$DEFAULT_DECODER]
      --hwaccel=MODE          define the hardware acceleration mode [$DEFAULT_HWACCEL]
      --gen-rawvideo          generate raw video (YUV in Y4M format) [no]
  -x, --exclude=GLOB          exclude test configurations matching GLOB

Package options:
  -p, --plugindir=DIR         location of MVT modules [$DEFAULT_PLUGINS_ROOT]
  -t, --testdir=DIR           location of MVT testsuite [$DEFAULT_TESTS_ROOT]
  -i, --inputdir=DIR          location of MVT testsuite source data [$DEFAULT_TESTS_ROOT]
  -o, --outputdir=DIR         location of MVT testsuite results []
EOF
}

plugindir="$DEFAULT_PLUGINS_ROOT"
testdir="$DEFAULT_TESTS_ROOT"
inputdir="$DEFAULT_TESTS_ROOT"
arg_decoder="$DEFAULT_DECODER"
opt_hwaccel="$DEFAULT_HWACCEL"
gen_rawvideo="no"
array_decl exclude_globs
while getopts ":he:p:t:i:o:x:-:" optchar "$@"; do
    case "$optchar" in
        (h)                     print_help; exit 1;;
        (p)                     plugindir="$OPTARG";;
        (t)                     testdir="$OPTARG";;
        (i)                     inputdir="$OPTARG";;
        (o)                     outputdir="$OPTARG";;
        (x)                     array_append exclude_globs "$OPTARG";;
        (\?)                    illegal_option "-$OPTARG";;
        (-)
            optval=${OPTARG#*=}
            optvar=${OPTARG%=$optval}
            case "$OPTARG" in
                (help)          print_help; exit 1;;
                (vaapi)         opt_hwaccel="vaapi";;
                (gen-rawvideo)  gen_rawvideo="yes";;
                (decoder=*)     arg_decoder="$optval";;
                (hwaccel=*)     opt_hwaccel="$optval";;
                (plugindir=*)   plugindir="$optval";;
                (testdir=*)     testdir="$optval";;
                (input=*)       input="$optval";;
                (outputdir=*)   outputdir="$optval";;
                (exclude=*)     array_append exclude_globs "$optval";;
                (*=*)           illegal_option "--$optvar=$optval";;
                (*)             illegal_option "--$optvar";;
            esac
            ;;
    esac
done
shift $((OPTIND-1))

# Determines the absolute path of the supplied directory
function get_abs_path() {
    local f="$1"

    [[ -f "$f" ]] && \
        { echo $(cd $(dirname $f) && pwd)/${f##*/}; return 0; }
    [[ -d "$f" ]] && \
        { echo $(cd $f && pwd); return 0; }
    echo $f
}

# Determines the absolute path of the supplied module
function cmd_get_path() {
    local dir="$1" cmd="$2" prefix="$3"

    [[ -x "$cmd" ]] && \
        { get_abs_path "$cmd"; return 0; }
    [[ -x "$dir/$cmd" ]] && \
        { echo "$dir/$cmd"; return 0; }
    [[ -n "$prefix" ]] && [[ -x "$dir/${prefix}_$cmd" ]] && \
        { echo "$dir/${prefix}_$cmd"; return 0; }
    return 1
}

# Sanity checks
[[ -d "$PCI_DEVICES_ROOT" ]] || \
    fatal_error "failed to locate root PCI devices dir"

[[ -n "$inputdir" ]] || inputdir="$testdir"
[[ -d "$inputdir" ]] || \
    fatal_error "failed to locate source data directory \`$inputdir'"

if [[ -n "$outputdir" ]]; then
    mkdir -p "$outputdir" 2>/dev/null || \
        fatal_error "failed to create output directory \`$outputdir'"
else
    outputdir=$(mktemp --tmpdir -d mvt_run.XXXXXX)
    outputdir_temp="yes"
fi

[[ -d "$plugindir" ]] || \
    fatal_error "failed to locate root modules dir"
plugindir=$(get_abs_path $plugindir)

cmd_decoder=$(cmd_get_path $plugindir $arg_decoder "dec")
[[ -n "$cmd_decoder" ]] || \
    fatal_error "failed to locate decoder module \`$arg_decoder'"

# Determines the graphics device path (PCI)
function gfx_get_device_path() {
    local devices_root="$PCI_DEVICES_ROOT"

    pushd $devices_root >/dev/null || exit
    for d in *:*:*.*; do
        local pci_class=$(< $d/class)
        [[ "$pci_class" = "0x030000" ]] && { echo "$devices_root/$d"; break; }
    done
    popd >/dev/null
}

# Determines the graphics device code
function gfx_get_device() {
    local device_id="$1"

    case "${device_id,,}" in
        (0x01[012][26]|0x010a)  echo "SNB";; # Gen6
        (0x01[56][26a])         echo "IVB";; # Gen7
        (0x0f3[0-3]|0x015[57])  echo "BYT";; # Gen7
        (0x0[4da]*)             echo "HSW";; # Gen7.5
        (0x16[0-3][26bade])     echo "BDW";; # Gen8
    esac
}

# Determines the graphics device name
function gfx_get_device_name() {
    local device="$1"

    case "${device^^}" in
        (SNB) echo "Sandybridge";;
        (IVB) echo "Ivybridge";;
        (BYT) echo "Baytrail";;
        (HSW) echo "Haswell";;
        (BDW) echo "Broadwell";;
        (*)   echo "<$device>";;
    esac
}

pci_device=$(< "$(gfx_get_device_path)/device")
gfx_device=$(gfx_get_device $pci_device)
[[ -n "$gfx_device" ]] || \
    fatal_error "failed to identify graphics device id $pci_device"

# Determines whether the graphics device supports the supplied codec
function gfx_has_codec() {
    local gfx_device="$1" codec="$2" profile="$3"
    local no_jpeg_pattern="SNB"
    local no_h264_mvc_pattern="SNB|IVB|BYT"
    local no_vp8_pattern="SNB|IVB|HSW"

    case "${gfx_device^^}:${codec,,}:${profile,,}" in
        (@($no_jpeg_pattern):jpeg:*)            return 1;; # JPEG
        (*:jpeg:)                               return 0;;
        (*:jpeg:baseline)                       return 0;;
        (*:mpeg2:)                              return 0;; # MPEG-2
        (*:mpeg2:simple)                        return 0;;
        (*:mpeg2:main)                          return 0;;
        (*:vc1:)                                return 0;; # VC-1
        (*:vc1:simple)                          return 0;;
        (*:vc1:main)                            return 0;;
        (*:vc1:advanced)                        return 0;;
        (*:h264:)                               return 0;; # H.264
        (*:h264:constrained-baseline)           return 0;;
        (*:h264:main)                           return 0;;
        (*:h264:high)                           return 0;;
        (@($no_h264_mvc_pattern):h264:multiview-high) return 1;;
        (*:h264:multiview-high)                 return 0;;
        (*:h264:stereo-high)                    return 0;;
        (@($no_vp8_pattern):vp8:*)              return 1;; # VP8
        (*:vp8:)                                return 0;;
    esac
    return 1
}

# Determines whether the HW decoder supports the specified encoded video size
function gfx_has_coded_size() {
    local gfx_device="$1" codec="$2" width="$3" height="$4"
    local mb_width=$(((width + 15) / 16)) mb_height=$(((height + 15) / 16))

    # Surface size
    case "${codec,,}" in
        (jpeg|mpeg2|vc1|h264|vp8)       # MFX_SURFACE_STATE
            (($width <= 16384 && $height <= 16384)) || return 1
            ;;
    esac

    # Coded size
    case "${gfx_device^^}:${codec,,}" in
        (*:jpeg)                        # MFX_JPEG_PIC_STATE
            (($width <= 65536 && $height <= 65536)) || return 1
            ;;
        (*:mpeg2)                       # MFX_MPEG2_PIC_STATE
            (($mb_width <= 256 && $mb_height <= 256)) || return 1
            ;;
        (*:h264)                        # MFX_AVC_PIC_STATE
            (($mb_width <= 256 && $mb_height <= 256)) || return 1
            (($mb_width == $mb_height && $mb_width == 256)) && return 1
            ;;
        (*:vc1)                         # MFX_VC1_LONG_PIC_STATE
            (($mb_width <= 255 && $mb_height <= 255)) || return 1
            ;;
        (*:vp8)                         # MFX_VP8_PIC_STATE
            (($mb_width <= 256 && $mb_height <= 256)) || return 1
            ;;
    esac
    return 0
}

N_TESTS=0
N_TESTS_PASSED=0
N_TESTS_SKIPPED=0

# Checks whether the supplied path matches one of the exclusion patterns
function match_exclude_globs() {
    local path="$1"

    for ((i = 0; i < $exclude_globs_size; i++)); do
        case "$path" in
            (${exclude_globs[$i]}) return 0;;
        esac
    done
    return 1
}

# Locates the source video file
function get_test_file() {
    local out_var="$1" name="$2" __file=""

    [[ -n "$GET_TEST_FILE_CACHE" ]] && \
        __file=$(find $GET_TEST_FILE_CACHE/ -type f -name "$name" -print -quit)
    [[ -z "$__file" ]] && \
        __file=$(find $inputdir/ -type f -name "$name" -print -quit)
    [[ -z "$__file" ]] && return 1

    GET_TEST_FILE_CACHE=$(dirname $__file)
    eval $out_var="'$__file'"
    return 0
}

# Terminal color codes
vt_color_default="\e[0;m"
vt_color_green="\e[0;32m"
vt_color_red="\e[0;31m"

# Executes the supplied test config
function run_test() {
    local conffile=$(get_abs_path "$1") base_conffile=${1##*/} t
    local FILE FILE_URL FILE_HASH
    local CODEC CODEC_PROFILE CODEC_HASH CODEC_MAX_WIDTH CODEC_MAX_HEIGHT
    local CODEC_PROFILE_COMPAT=''

    match_exclude_globs $conffile && return 0

    ((N_TESTS++))
    local id=$(printf "%05d" $N_TESTS)
    local test_name="$id.${base_conffile%%.conf}"
    local test_name_format="%-60s"
    local outdir="$outputdir/$test_name"
    mkdir -p $outdir

    local logfile="$outdir/test.log"
    echo "X-Test-Config: $conffile" > $logfile

    . $conffile

    # Make sure the necessary tags are defined
    for tag in FILE FILE_HASH CODEC CODEC_HASH CODEC_MAX_WIDTH CODEC_MAX_HEIGHT; do
        eval t=\$$tag
        [[ -n "$t" ]] || {
            log_message $logfile "error" "no $tag tag defined"
            ((N_TESTS_SKIPPED++)); return 0
        }
    done

    # If testing with hardware acceleration, check the platform supports codec
    [[ "$opt_hwaccel" != "none" ]] && \
        ! gfx_has_codec $gfx_device $CODEC $CODEC_PROFILE && \
      ( [[ -z "$CODEC_PROFILE_COMPAT" ]] || \
        ! gfx_has_codec $gfx_device $CODEC $CODEC_PROFILE_COMPAT ) &&
    {
        log_message $logfile "info" "unsupported codec ($CODEC/$CODEC_PROFILE)"
        ((N_TESTS_SKIPPED++)); return 0
    }

    # Also check the hardware would support the encoded video size
    [[ "$opt_hwaccel" != "none" ]] && \
        ! gfx_has_coded_size $gfx_device $CODEC \
            $CODEC_MAX_WIDTH $CODEC_MAX_HEIGHT &&
    {
        log_message $logfile "info" \
            "unsupported encoded size (${CODEC_MAX_WIDTH}x${CODEC_MAX_HEIGHT})"
        ((N_TESTS_SKIPPED++)); return 0
    }

    # Locate the video file
    local file=""
    get_test_file file "$FILE" || {
        log_message $logfile "error" "failed to locate source file \`$FILE'"
        ((N_TESTS_SKIPPED++)); return 0
    }
    echo "X-Test-Data: $file" >> $logfile

    local reffile="${conffile%%.conf}.ref"
    cp "$reffile" "$outdir/test.ref"

    local opt_gen_rawvideo=""
    [[ "$gen_rawvideo" = "yes" ]] && \
        opt_gen_rawvideo="--gen-output=$outdir/test.out.y4m"

    printf "${test_name_format}" $test_name
    local test_result="FAIL"
    local test_result_color="$vt_color_red"
    $cmd_decoder "$opt_gen_rawvideo"            \
        --hwaccel=$opt_hwaccel                  \
        -c $CODEC_HASH                          \
        -r "$outdir/test.out"                   \
        $file >> $logfile 2>&1 && 
    diff -ub "$outdir/test.out" "$outdir/test.ref" >"$outdir/test.diff" && {
        test_result="PASS"
        test_result_color="$vt_color_green"
        ((N_TESTS_PASSED++))
    }
    echo "X-Test-Result: $test_result" >> $logfile
    echo -e "${test_result_color}${test_result}${vt_color_default}"
    printf "${test_name_format}%s\n" $test_name $test_result >> $TEST_LOGFILE
}

# Executes tests in the supplied directory
function run_tests() {
    local dir="$1"

    while read f; do
        match_exclude_globs "$f" && continue
        run_test "$f"
    done < <(find $dir/ -name "*.conf" -type f -print)
}

TEST_LOGFILE=$outputdir/summary.txt
echo "Media Validation Tools (version @VERSION@)" > $TEST_LOGFILE
echo >> $TEST_LOGFILE
echo "Decoder: $cmd_decoder" >> $TEST_LOGFILE
[[ "$opt_hwaccel" != "none" ]] &&
echo "Hardware acceleration mode \`$opt_hwaccel' enabled on " \
    $(gfx_get_device_name $gfx_device) >> $TEST_LOGFILE
echo >> $TEST_LOGFILE
cat $TEST_LOGFILE

if [[ $# -eq 0 ]]; then
    run_tests $testdir
else
    for arg in "$@"; do
        if [[ -f "$arg" ]]; then
            run_test $arg
        elif [[ -d "$arg" ]]; then
            run_tests $arg
        fi
    done
fi

n_tests=$((N_TESTS - N_TESTS_SKIPPED))
pass_rate=$(bc -l <<< \
    "if ($n_tests > 0) 100 * $N_TESTS_PASSED / $n_tests else 0")
printf "\nSummary: %d tests run. Passed: %d (%.2f%%)\n" \
    $n_tests $N_TESTS_PASSED $pass_rate | tee -a $TEST_LOGFILE

[[ -n "$outputdir_temp" ]] && rm -rf "$outputdir"
